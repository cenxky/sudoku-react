{"version":3,"sources":["lib/sudoku.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["NUMBERS","Sudoku","grid","Object","classCallCheck","this","defaultGrid","toConsumableArray","Array","map","x","fill","y","value","allowedNumbersInRow","includes","Error","concat","allowedNumbersInColumn","allowedNumbersInBlock","row","_this","filter","num","_this2","column","bx","Math","floor","by","numbers_in_block","i","j","push","get","_this3","cells","forEach","solvePrimary","solveUltimately","_this4","emptyCells","length","loop","cell","_cell","slicedToArray","allowedNumbers","set","_this$emptyCells$","shift","solve","err","sudoku","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","_useState","useState","_useState2","gridData","setGridData","_useState3","_useState4","solvedCells","setSolvedCells","className","layout","Content","key","cx","block-boder","solved","some","arr","join","type","onChange","e","parsedValue","parseInt","message","info","warning","setValue","target","es_button","Group","size","onClick","console","time","Modal","error","title","content","timeEnd","reset","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.721dec27.chunk.js","sourcesContent":["const SIZE = 9\nconst NUMBERS = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nexport default class Sudoku {\n  grid: Array<number[]>\n\n  constructor(grid?: Array<number[]>) {\n    this.grid = grid || this.defaultGrid()\n  }\n\n  reset() {\n    this.grid = this.defaultGrid()\n  }\n\n  defaultGrid() {\n    return [...Array(SIZE)].map(x => [...Array(SIZE).fill(0)])\n  }\n\n  get(x: number, y: number): number {\n    return this.grid[y][x]\n  }\n\n  set(x: number, y: number, value: number): Error | number {\n    if (value) {\n      if (!this.allowedNumbersInRow(y).includes(value)) {\n        throw new Error(`${value} is not allowed in the row ${y}`)\n      }\n\n      if (!this.allowedNumbersInColumn(x).includes(value)) {\n        throw new Error(`${value} is not allowed in the column ${x}`)\n      }\n\n      if (!this.allowedNumbersInBlock(x, y).includes(value)) {\n        throw new Error(`${value} is not allowed in the block ${y}`)\n      }\n    }\n\n    return this.grid[y][x] = value\n  }\n\n  row(y: number): number[] {\n    return this.grid[y]\n  }\n\n  column(x: number): number[] {\n    return this.grid.map(row => row[x])\n  }\n\n  allowedNumbersInRow(y: number) {\n    return NUMBERS.filter(num => !this.row(y).includes(num))\n  }\n\n  allowedNumbersInColumn(x: number) {\n    return NUMBERS.filter(num => !this.column(x).includes(num))\n  }\n\n  allowedNumbersInBlock(x: number, y: number) {\n    const bx = Math.floor(x / 3) * 3\n    const by = Math.floor(y / 3) * 3\n\n    let numbers_in_block: number[] = []\n\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        numbers_in_block.push(this.get(bx + i, by + j))\n      }\n    }\n\n    return NUMBERS.filter(num => !numbers_in_block.includes(num))\n  }\n\n  allowedNumbers(x: number, y: number) {\n    return this.allowedNumbersInBlock(x, y)\n      .filter(num => (\n        this.allowedNumbersInRow(y).includes(num) &&\n        this.allowedNumbersInColumn(x).includes(num)\n      ))\n  }\n\n  emptyCells() {\n    let cells: Array<[number, number]> = []\n\n    this.grid.forEach((row, y) => {\n      row.forEach((num, x) => {\n        !num && cells.push([x, y])\n      })\n    })\n\n    return cells\n  }\n\n  solve() {\n    // // row\n    // for (var y = 0; y < 9; y++) {\n    //   var emptyCellsInRow: Array<number[]> = []\n    //   this.row(y).forEach((value: number, x: number) => {\n    //     !value && emptyCellsInRow.push([x, y])\n    //   })\n\n    //   const valuesInEmptyCells = emptyCellsInRow.map((cell: number[]) => (\n    //     this.allowedNumbers(cell[0], cell[1])\n    //   ))\n    // }\n\n    return this.solvePrimary() || this.solveUltimately()\n\n    // return this.solveUltimately()\n  }\n\n  solvePrimary() {\n    if (!this.emptyCells().length) { return true }\n\n    var loop = false\n\n    this.emptyCells().forEach((cell: number[]) => {\n      const [x, y] = cell\n      const allowedNumbers = this.allowedNumbers(x, y)\n\n      if (allowedNumbers.length === 1) {\n        this.set(x, y, allowedNumbers[0])\n        loop = true\n      }\n    })\n\n    if (loop) { this.solvePrimary() }\n  }\n\n  solveUltimately() {\n    if (!this.emptyCells().length) { return true }\n\n    let [x, y] = this.emptyCells()[0]\n    var allowedNumbers = this.allowedNumbers(x, y)\n\n    while (allowedNumbers.length > 0) {\n      let value = allowedNumbers.shift() as number\n      this.set(x, y, value)\n\n      try {\n        if (this.solve()) { return true }\n      } catch(err) {\n        // Nothing\n      }\n\n      this.set(x, y, 0)\n    }\n\n    return false\n  }\n}\n","import React, { useState } from 'react'\nimport cx from 'classnames'\nimport Sudoku from './lib/sudoku'\n\nimport './App.scss'\nimport 'antd/dist/antd.css'\nimport { Layout, Button, Modal, message } from 'antd'\n\n// const sudoku = new Sudoku()\nconst sudoku = new Sudoku([\n  [5, 1, 9, 0, 0, 0, 4, 3, 0],\n  [7, 2, 4, 9, 0, 0, 0, 0, 0],\n  [0, 0, 0, 2, 5, 4, 9, 0, 0],\n  [1, 7, 0, 0, 4, 0, 2, 0, 6],\n  [0, 0, 0, 0, 9, 0, 0, 0, 3],\n  [0, 0, 3, 0, 0, 6, 0, 8, 0],\n  [0, 0, 1, 4, 7, 0, 0, 6, 0],\n  [0, 0, 0, 5, 0, 8, 1, 2, 0],\n  [0, 9, 0, 0, 6, 0, 3, 0, 4]\n])\n\ntype GridDataType = Array<number[]>\n\nexport default function App() {\n  const [gridData, setGridData] = useState<GridDataType>(sudoku.grid)\n  const [solvedCells, setSolvedCells] = useState<GridDataType>([])\n\n  const setValue = (x: number, y: number, value: string) => {\n    const parsedValue = parseInt(value)\n\n    if (value.length && parsedValue > 9) {\n      message.info(`Only 1-9 numbers are allowed to input here!`)\n      return false\n    }\n\n    try {\n      sudoku.set(x, y, parsedValue || 0)\n    } catch (err) {\n      message.warning(`Conflict! You cannot set ${parsedValue} here!`)\n      return false\n    }\n\n    setGridData([...sudoku.grid])\n  }\n\n  const solveSudoku = () => {\n    setSolvedCells(sudoku.emptyCells())\n\n    console.time('Sudoku runs');\n\n    if (sudoku.solve()) {\n      setGridData([...sudoku.grid])\n    } else {\n      Modal.error({\n        title: 'Sudoku',\n        content: 'Sorry, this sudoku has no solution!'\n      });\n    }\n\n    console.timeEnd('Sudoku runs');\n  }\n\n  const resetSudoku = () => {\n    sudoku.reset()\n    setSolvedCells([])\n    setGridData([...sudoku.grid])\n  }\n\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Layout.Content>\n          <div className=\"sudoku-container\">\n            <table className=\"sudoku-table\">\n              <tbody>\n                {gridData.map((row, y) => (\n                  <tr\n                    key={y}\n                    className={cx({ \"block-boder\": (y + 1) % 3 === 0 })}\n                  >\n                    {row.map((value, x) => (\n                      <td\n                        key={x}\n                        className={cx({\n                          \"block-boder\": (x + 1) % 3 === 0,\n                          \"solved\": solvedCells.some(arr => arr.join() === [x, y].join())\n                        })}\n                      >\n                        <input\n                          type=\"text\"\n                          value={value || \"\"}\n                          onChange={e => setValue(x, y, e.target.value)}\n                        />\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <div className=\"sudoku-actions\">\n              <Button.Group>\n                <Button type=\"primary\" size=\"large\" onClick={solveSudoku}>Solve Now!</Button>\n                <Button type=\"default\" size=\"large\" onClick={resetSudoku}>Clear All</Button>\n              </Button.Group>\n            </div>\n          </div>\n        </Layout.Content>\n      </Layout>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
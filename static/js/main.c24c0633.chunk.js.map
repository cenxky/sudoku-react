{"version":3,"sources":["workers/solve-sudoku-worker.ts","workers/generate-sudoku-worker.ts","lib/sudoku.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Worker","MODES","width","height","lowerSize","higherSize","Sudoku","modeKey","options","grid","mode","blockSize","numbers","length","toString","this","Array","map","_","i","defaultGrid","reset","rand","min","max","Math","floor","random","randInSizeRange","minAllowedSize","maxAllowedSize","gridCellSize","baseNumbers","fillX","fillY","allowedNumbers","randomIndex","set","solve","generate","digNumbers","digX","digY","get","x","fill","y","value","allowedNumbersInRow","includes","Error","allowedNumbersInColumn","allowedNumbersInBlock","row","filter","num","column","bx","by","numbersInBlock","j","push","numbersInRow","numbersInColumn","cells","forEach","allowedNumbersLength","cell","emptyCells","some","emptyCell","every","solveUltimately","isSolved","anyEmptyCell","shift","err","sudoku","NUMBERS","App","inputRefs","useRef","useState","gridData","setGridData","solvedCells","setSolvedCells","solving","setSolving","generating","setGenerating","showTips","setShowTips","editingCell","setEditingCell","useEffect","sudokuSolver","SudokuSolver","addEventListener","event","data","success","Modal","error","title","content","postMessage","sudokuGenerator","SudokuGenerator","current","inputRef","focus","listener","target","closest","document","removeEventListener","className","key","cx","solved","arr","join","onClick","type","onChange","e","parsedValue","parseInt","message","info","warning","setValue","readOnly","ref","input","Group","size","disabled","loading","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c24c0633.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"f6a8cc200d90b3824ac2.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"a2739df71d669ddaf4e6.worker.js\");\n};","type ModeType = {\n  width: number\n  height: number\n  lowerSize: number\n  higherSize: number\n}\n\ntype ModesType = {\n  [index: string]: ModeType\n}\n\ntype SudokuOptionsType = {\n  grid?: Array<number[]>\n  mode?: \"4\" | \"6\" | \"8\" | \"9\"\n}\n\nconst MODES: ModesType = {\n  \"4\": { width: 2, height: 2, lowerSize: 4, higherSize: 8 },\n  \"6\": { width: 3, height: 2, lowerSize: 9, higherSize: 18 },\n  \"8\": { width: 4, height: 2, lowerSize: 18, higherSize: 36 },\n  \"9\": { width: 3, height: 3, lowerSize: 17, higherSize: 40 }\n}\n\nconst DEFAULT_MODE = \"9\"\n\nexport default class Sudoku {\n  grid: Array<number[]>\n  mode: ModeType\n  blockSize: number\n  numbers: number[]\n\n  constructor(options: SudokuOptionsType = {}) {\n    let modeKey\n\n    if (options.grid) {\n      modeKey = options.grid.length.toString()\n    } else {\n      modeKey = options.mode || DEFAULT_MODE\n    }\n\n    this.mode = MODES[modeKey]\n    this.blockSize = this.mode.width * this.mode.height\n    this.numbers = [...Array(this.blockSize)].map((_, i) => i + 1)\n    this.grid = options.grid || this.defaultGrid()\n  }\n\n  reset() {\n    this.grid = this.defaultGrid()\n  }\n\n  generate(): void {\n    this.reset()\n\n    const rand = (min: number, max: number) =>\n      Math.floor(Math.random() * (max - min + 1)) + min\n\n    const randInSizeRange = () => rand(0, this.blockSize - 1)\n    const { lowerSize, higherSize } = this.mode\n    const minAllowedSize = Math.floor(this.blockSize / 3)\n    const maxAllowedSize = this.blockSize - 2\n    const gridCellSize = this.blockSize ** 2\n\n    let baseNumbers = this.blockSize\n\n    while (baseNumbers > 0) {\n      const fillX = randInSizeRange()\n      const fillY = randInSizeRange()\n      const allowedNumbers = this.allowedNumbers(fillX, fillY)\n\n      if (allowedNumbers.length > minAllowedSize) {\n        const randomIndex = rand(0, allowedNumbers.length - 1)\n        this.set(fillX, fillY, allowedNumbers[randomIndex])\n        baseNumbers--\n      }\n    }\n\n    if (!this.solve()) {\n      return this.generate()\n    }\n\n    let digNumbers = gridCellSize - rand(lowerSize, higherSize)\n\n    while (digNumbers > 0) {\n      const digX = randInSizeRange()\n      const digY = randInSizeRange()\n\n      if (\n        this.get(digX, digY) &&\n        this.allowedNumbers(digX, digY).length < maxAllowedSize\n      ) {\n        this.set(digX, digY, 0)\n        digNumbers--\n      }\n    }\n  }\n\n  defaultGrid() {\n    return [...Array(this.blockSize)].map(x => [\n      ...Array(this.blockSize).fill(0)\n    ])\n  }\n\n  get(x: number, y: number): number {\n    return this.grid[y][x]\n  }\n\n  set(x: number, y: number, value: number): Error | number {\n    if (value) {\n      if (this.get(x, y) === value) {\n        return value\n      }\n\n      if (!this.allowedNumbersInRow(y).includes(value)) {\n        throw new Error(`${value} is not allowed in the row ${y}`)\n      }\n\n      if (!this.allowedNumbersInColumn(x).includes(value)) {\n        throw new Error(`${value} is not allowed in the column ${x}`)\n      }\n\n      if (!this.allowedNumbersInBlock(x, y).includes(value)) {\n        throw new Error(`${value} is not allowed in the block ${y}`)\n      }\n    }\n\n    return (this.grid[y][x] = value)\n  }\n\n  row(y: number): number[] {\n    return this.grid[y]\n  }\n\n  column(x: number): number[] {\n    return this.grid.map(row => row[x])\n  }\n\n  allowedNumbersInRow(y: number) {\n    const row = this.row(y)\n    return this.numbers.filter(num => !row.includes(num))\n  }\n\n  allowedNumbersInColumn(x: number) {\n    const column = this.column(x)\n    return this.numbers.filter(num => !column.includes(num))\n  }\n\n  allowedNumbersInBlock(x: number, y: number) {\n    const { width, height } = this.mode\n    const bx = Math.floor(x / width) * width\n    const by = Math.floor(y / height) * height\n\n    let numbersInBlock: number[] = []\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++) {\n        numbersInBlock.push(this.get(bx + i, by + j))\n      }\n    }\n\n    return this.numbers.filter(num => !numbersInBlock.includes(num))\n  }\n\n  allowedNumbers(x: number, y: number) {\n    const numbersInBlock = this.allowedNumbersInBlock(x, y)\n\n    if (numbersInBlock.length > 1) {\n      const numbersInRow = this.allowedNumbersInRow(y)\n      const numbersInColumn = this.allowedNumbersInColumn(x)\n      return numbersInBlock.filter(\n        num => numbersInRow.includes(num) && numbersInColumn.includes(num)\n      )\n    } else {\n      return numbersInBlock\n    }\n  }\n\n  emptyCells() {\n    let cells: Array<[number, number]> = []\n\n    this.grid.forEach((row, y) => {\n      row.forEach((num, x) => {\n        !num && cells.push([x, y])\n      })\n    })\n\n    return cells\n  }\n\n  anyEmptyCell(allowedNumbersLength = this.blockSize + 1) {\n    let cell: number[] = []\n\n    this.emptyCells().some((emptyCell: number[]) => {\n      const [x, y] = emptyCell\n      const length = this.allowedNumbers(x, y).length\n\n      if (length < allowedNumbersLength) {\n        cell = emptyCell\n        allowedNumbersLength = length\n      }\n\n      return length === 1\n    })\n\n    return cell\n  }\n\n  isSolved() {\n    return this.grid.every((row, y) => row.every((num, x) => num))\n  }\n\n  solve() {\n    return this.solveUltimately()\n  }\n\n  solveUltimately() {\n    if (this.isSolved()) {\n      return true\n    }\n\n    let [x, y] = this.anyEmptyCell()\n    var allowedNumbers = this.allowedNumbers(x, y)\n\n    while (allowedNumbers.length > 0) {\n      let value = allowedNumbers.shift() as number\n      this.set(x, y, value)\n\n      try {\n        if (this.solveUltimately()) {\n          return true\n        }\n      } catch (err) {\n        // Nothing\n      }\n\n      this.set(x, y, 0)\n    }\n\n    return false\n  }\n}\n","import React, { useState, useEffect, useRef } from \"react\"\nimport cx from \"classnames\"\nimport Sudoku from \"./lib/sudoku\"\n\n/* eslint import/no-webpack-loader-syntax: off */\nimport SudokuSolver from \"worker-loader!./workers/solve-sudoku-worker\"\nimport SudokuGenerator from \"worker-loader!./workers/generate-sudoku-worker\"\n\nimport \"./App.scss\"\nimport \"antd/dist/antd.min.css\"\nimport { Button, Modal, message } from \"antd\"\n\n// Sudoku basic config\nconst mode = \"9\"\nconst sudoku = new Sudoku({ mode })\nconst NUMBERS = sudoku.numbers\n\ntype GridDataType = Array<number[]>\n\nexport default function App() {\n  const inputRefs = useRef<{ [index: string]: HTMLInputElement | null }>({})\n\n  const [gridData, setGridData] = useState<GridDataType>(sudoku.grid)\n  const [solvedCells, setSolvedCells] = useState<GridDataType>([])\n  const [solving, setSolving] = useState<boolean>(false)\n  const [generating, setGenerating] = useState<boolean>(true)\n  const [showTips, setShowTips] = useState<boolean>(false)\n  const [editingCell, setEditingCell] = useState<string | null>()\n\n  useEffect(() => {\n    if (solving) {\n      const sudokuSolver: Worker = new SudokuSolver()\n      sudokuSolver.addEventListener(\"message\", (event: any) => {\n        setSolving(false)\n\n        if (event.data.success) {\n          setGridData(event.data.gridData)\n        } else {\n          Modal.error({\n            title: \"Sudoku\",\n            content: \"Sorry, this sudoku has no solution!\"\n          })\n        }\n      })\n\n      setSolvedCells(sudoku.emptyCells())\n      sudokuSolver.postMessage({ gridData, mode })\n    }\n  }, [solving, gridData])\n\n  useEffect(() => {\n    if (generating) {\n      const sudokuGenerator: Worker = new SudokuGenerator()\n      sudokuGenerator.addEventListener(\"message\", (event: any) => {\n        sudoku.grid = event.data.gridData\n        setGenerating(false)\n        setGridData([...sudoku.grid])\n      })\n\n      setShowTips(false)\n      setSolvedCells([])\n      sudokuGenerator.postMessage({ mode })\n    }\n  }, [generating, gridData])\n\n  useEffect(() => {\n    if (editingCell) {\n      if (inputRefs.current) {\n        const inputRef = inputRefs.current[editingCell]\n        inputRef && inputRef.focus()\n      }\n    }\n  }, [editingCell])\n\n  useEffect(() => {\n    const listener = (event: any) => {\n      if (!event.target.closest(\".sudoku-tips\")) {\n        setEditingCell(null)\n      }\n    }\n\n    document.addEventListener(\"click\", listener)\n\n    return () => {\n      document.removeEventListener(\"click\", listener)\n    }\n  }, [])\n\n  const setValue = (x: number, y: number, value: string) => {\n    const parsedValue = parseInt(value)\n\n    if (value.length && parsedValue > sudoku.blockSize) {\n      message.info(`Only 1-9 numbers are allowed to input here!`)\n      return false\n    }\n\n    try {\n      sudoku.set(x, y, parsedValue || 0)\n    } catch (err) {\n      message.warning(`Conflict! You cannot set ${parsedValue} here!`)\n      return false\n    }\n\n    setGridData([...sudoku.grid])\n  }\n\n  const resetSudoku = () => {\n    sudoku.reset()\n    setSolvedCells([])\n    setGridData([...sudoku.grid])\n    setShowTips(false)\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-sudoku\">\n        <div className=\"sudoku-container\">\n          <table className=\"sudoku-table\">\n            <tbody>\n              {gridData.map((row, y) => (\n                <tr\n                  key={y}\n                  className={cx({\n                    \"block-boder\": (y + 1) % sudoku.mode.height === 0\n                  })}\n                >\n                  {row.map((value, x) => (\n                    <td\n                      key={x}\n                      className={cx({\n                        \"block-boder\": (x + 1) % sudoku.mode.width === 0,\n                        solved: solvedCells.some(\n                          arr => arr.join() === [x, y].join()\n                        )\n                      })}\n                      onClick={() => setEditingCell([x, y].join())}\n                    >\n                      <div className=\"cell\">\n                        {showTips && !value && editingCell !== [x, y].join() ? (\n                          <div className=\"sudoku-tips\">\n                            {NUMBERS.map(num => (\n                              <span key={num}>\n                                {sudoku.allowedNumbers(x, y).includes(num) &&\n                                  num}\n                              </span>\n                            ))}\n                          </div>\n                        ) : (\n                          <input\n                            type=\"text\"\n                            value={value || \"\"}\n                            onChange={e => setValue(x, y, e.target.value)}\n                            readOnly={generating || solving}\n                            ref={input =>\n                              (inputRefs.current[[x, y].join()] = input)\n                            }\n                          />\n                        )}\n                      </div>\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <div className=\"sudoku-actions\">\n            <Button.Group>\n              <Button\n                type=\"primary\"\n                size=\"large\"\n                onClick={() => setSolving(true)}\n                disabled={generating || solving}\n                loading={solving}\n              >\n                {solving ? \"Solving\" : \"Solve Now!\"}\n              </Button>\n              <Button\n                size=\"large\"\n                onClick={() => setGenerating(true)}\n                disabled={generating || solving}\n                loading={generating}\n              >\n                Regenerate Sudoku\n              </Button>\n              <Button size=\"large\" onClick={() => setShowTips(!showTips)}>\n                {showTips ? \"Hide Tips\" : \"Show Tips\"}\n              </Button>\n              <Button\n                size=\"large\"\n                onClick={resetSudoku}\n                disabled={generating || solving}\n              >\n                Clear All\n              </Button>\n            </Button.Group>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
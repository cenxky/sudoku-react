{"version":3,"sources":["lib/sudoku.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["NUMBERS","Sudoku","grid","Object","classCallCheck","this","defaultGrid","reset","rand","min","max","Math","floor","random","baseNumbers","fillX","fillY","allowedNumbers","length","randomIndex","set","solve","generate","digNumbers","digX","digY","get","toConsumableArray","Array","map","x","fill","y","value","allowedNumbersInRow","includes","Error","concat","allowedNumbersInColumn","allowedNumbersInBlock","row","filter","num","column","bx","by","numbersInBlock","i","j","push","numbersInRow","numbersInColumn","cells","forEach","_this","allowedNumbersLength","arguments","undefined","SIZE","cell","emptyCells","some","emptyCell","_emptyCell","slicedToArray","every","solveUltimately","isSolved","_this$anyEmptyCell","anyEmptyCell","_this$anyEmptyCell2","shift","err","sudoku","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","inputRefs","useRef","_useState","useState","_useState2","gridData","setGridData","_useState3","_useState4","solvedCells","setSolvedCells","_useState5","_useState6","solving","setSolving","_useState7","_useState8","showTips","setShowTips","_useState9","_useState10","editingCell","setEditingCell","useEffect","setTimeout","solveSudoku","current","inputRef","focus","listener","event","target","closest","document","addEventListener","removeEventListener","console","time","sudokuSolvedStatus","timeEnd","Modal","error","title","content","resetSudoku","className","layout","Content","key","cx","block-boder","solved","arr","join","onClick","type","onChange","e","parsedValue","parseInt","message","info","warning","setValue","readOnly","ref","input","es_button","Group","size","loading","disabled","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e7f3cbd.chunk.js","sourcesContent":["const SIZE = 9\nconst NUMBERS = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nexport default class Sudoku {\n  grid: Array<number[]>\n\n  constructor(grid?: Array<number[]>) {\n    this.grid = grid || this.defaultGrid()\n  }\n\n  reset() {\n    this.grid = this.defaultGrid()\n  }\n\n  generate(): void {\n    this.reset()\n\n    const rand = (min: number, max: number) =>\n      Math.floor(Math.random() * (max - min + 1)) + min\n\n    let baseNumbers = 17\n\n    while (baseNumbers > 0) {\n      const fillX = rand(0, 8)\n      const fillY = rand(0, 8)\n      const allowedNumbers = this.allowedNumbers(fillX, fillY)\n\n      if (allowedNumbers.length > 3) {\n        const randomIndex = rand(0, allowedNumbers.length - 1)\n        this.set(fillX, fillY, allowedNumbers[randomIndex])\n        baseNumbers--\n      }\n    }\n\n    if (!this.solve()) {\n      return this.generate()\n    }\n\n    let digNumbers = 81 - rand(17, 40)\n\n    while (digNumbers > 0) {\n      const digX = rand(0, 8)\n      const digY = rand(0, 8)\n\n      if (this.get(digX, digY) && this.allowedNumbers(digX, digY).length < 7) {\n        this.set(digX, digY, 0)\n        digNumbers--\n      }\n    }\n  }\n\n  defaultGrid() {\n    return [...Array(SIZE)].map(x => [...Array(SIZE).fill(0)])\n  }\n\n  get(x: number, y: number): number {\n    return this.grid[y][x]\n  }\n\n  set(x: number, y: number, value: number): Error | number {\n    if (value) {\n      if (!this.allowedNumbersInRow(y).includes(value)) {\n        throw new Error(`${value} is not allowed in the row ${y}`)\n      }\n\n      if (!this.allowedNumbersInColumn(x).includes(value)) {\n        throw new Error(`${value} is not allowed in the column ${x}`)\n      }\n\n      if (!this.allowedNumbersInBlock(x, y).includes(value)) {\n        throw new Error(`${value} is not allowed in the block ${y}`)\n      }\n    }\n\n    return (this.grid[y][x] = value)\n  }\n\n  row(y: number): number[] {\n    return this.grid[y]\n  }\n\n  column(x: number): number[] {\n    return this.grid.map(row => row[x])\n  }\n\n  allowedNumbersInRow(y: number) {\n    const row = this.row(y)\n    return NUMBERS.filter(num => !row.includes(num))\n  }\n\n  allowedNumbersInColumn(x: number) {\n    const column = this.column(x)\n    return NUMBERS.filter(num => !column.includes(num))\n  }\n\n  allowedNumbersInBlock(x: number, y: number) {\n    const bx = Math.floor(x / 3) * 3\n    const by = Math.floor(y / 3) * 3\n\n    let numbersInBlock: number[] = []\n\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        numbersInBlock.push(this.get(bx + i, by + j))\n      }\n    }\n\n    return NUMBERS.filter(num => !numbersInBlock.includes(num))\n  }\n\n  allowedNumbers(x: number, y: number) {\n    const numbersInBlock = this.allowedNumbersInBlock(x, y)\n\n    if (numbersInBlock.length > 1) {\n      const numbersInRow = this.allowedNumbersInRow(y)\n      const numbersInColumn = this.allowedNumbersInColumn(x)\n      return numbersInBlock.filter(\n        num => numbersInRow.includes(num) && numbersInColumn.includes(num)\n      )\n    } else {\n      return numbersInBlock\n    }\n  }\n\n  emptyCells() {\n    let cells: Array<[number, number]> = []\n\n    this.grid.forEach((row, y) => {\n      row.forEach((num, x) => {\n        !num && cells.push([x, y])\n      })\n    })\n\n    return cells\n  }\n\n  anyEmptyCell(allowedNumbersLength = SIZE + 1) {\n    let cell: number[] = []\n\n    this.emptyCells().some((emptyCell: number[]) => {\n      const [x, y] = emptyCell\n      const length = this.allowedNumbers(x, y).length\n\n      if (length < allowedNumbersLength) {\n        cell = emptyCell\n        allowedNumbersLength = length\n      }\n\n      return length === 1\n    })\n\n    return cell\n  }\n\n  isSolved() {\n    return this.grid.every((row, y) => row.every((num, x) => num))\n  }\n\n  solve() {\n    return this.solveUltimately()\n  }\n\n  solveUltimately() {\n    if (this.isSolved()) {\n      return true\n    }\n\n    let [x, y] = this.anyEmptyCell()\n    var allowedNumbers = this.allowedNumbers(x, y)\n\n    while (allowedNumbers.length > 0) {\n      let value = allowedNumbers.shift() as number\n      this.set(x, y, value)\n\n      try {\n        if (this.solveUltimately()) {\n          return true\n        }\n      } catch (err) {\n        // Nothing\n      }\n\n      this.set(x, y, 0)\n    }\n\n    return false\n  }\n}\n","import React, { useState, useEffect, useRef } from \"react\"\nimport cx from \"classnames\"\nimport Sudoku from \"./lib/sudoku\"\n\nimport \"./App.scss\"\nimport \"antd/dist/antd.css\"\nimport { Layout, Button, Modal, message } from \"antd\"\n\nconst sudoku = new Sudoku()\nsudoku.generate()\n\n// const sudoku = new Sudoku([\n//   [4, 0, 0, 0, 0, 0, 8, 0, 5],\n//   [0, 3, 0, 0, 0, 0, 0, 0, 0],\n//   [0, 0, 0, 7, 0, 0, 0, 0, 0],\n//   [0, 2, 0, 0, 0, 0, 0, 6, 0],\n//   [0, 0, 0, 0, 8, 0, 4, 0, 0],\n//   [0, 0, 0, 0, 1, 0, 0, 0, 0],\n//   [0, 0, 0, 6, 0, 3, 0, 7, 0],\n//   [5, 0, 0, 2, 0, 0, 0, 0, 0],\n//   [1, 0, 4, 0, 0, 0, 0, 0, 0]\n// ])\n\n// const sudoku = new Sudoku([\n//   [0, 3, 0, 0, 0, 0, 0, 0, 1],\n//   [0, 0, 0, 5, 0, 0, 0, 0, 4],\n//   [0, 0, 5, 0, 0, 7, 0, 0, 0],\n//   [0, 0, 0, 0, 3, 0, 0, 0, 9],\n//   [6, 0, 0, 0, 0, 0, 0, 0, 0],\n//   [7, 0, 0, 0, 0, 0, 0, 4, 0],\n//   [0, 9, 0, 0, 4, 0, 0, 0, 0],\n//   [0, 5, 0, 0, 0, 0, 7, 0, 0],\n//   [0, 0, 0, 0, 0, 8, 0, 6, 0]\n// ])\n\ntype GridDataType = Array<number[]>\n\nexport default function App() {\n  const inputRefs = useRef<{ [index: string]: HTMLInputElement | null }>({})\n\n  const [gridData, setGridData] = useState<GridDataType>(sudoku.grid)\n  const [solvedCells, setSolvedCells] = useState<GridDataType>([])\n  const [solving, setSolving] = useState<boolean>(false)\n  const [showTips, setShowTips] = useState<boolean>(false)\n  const [editingCell, setEditingCell] = useState<string | null>()\n\n  useEffect(() => {\n    if (solving) {\n      setTimeout(solveSudoku, 300)\n    }\n  }, [solving])\n\n  useEffect(() => {\n    if (editingCell) {\n      if (inputRefs.current) {\n        const inputRef = inputRefs.current[editingCell]\n        inputRef && inputRef.focus()\n      }\n    }\n  }, [editingCell])\n\n  useEffect(() => {\n    const listener = (event: any) => {\n      if (!event.target.closest(\".sudoku-tips\")) {\n        setEditingCell(null)\n      }\n    }\n\n    document.addEventListener(\"click\", listener)\n\n    return () => {\n      document.removeEventListener(\"click\", listener)\n    }\n  }, [])\n\n  const setValue = (x: number, y: number, value: string) => {\n    const parsedValue = parseInt(value)\n\n    if (value.length && parsedValue > 9) {\n      message.info(`Only 1-9 numbers are allowed to input here!`)\n      return false\n    }\n\n    try {\n      sudoku.set(x, y, parsedValue || 0)\n    } catch (err) {\n      message.warning(`Conflict! You cannot set ${parsedValue} here!`)\n      return false\n    }\n\n    setGridData([...sudoku.grid])\n  }\n\n  const solveSudoku = () => {\n    setSolvedCells(sudoku.emptyCells())\n\n    console.time(\"Sudoku runs\")\n    const sudokuSolvedStatus = sudoku.solve()\n    console.timeEnd(\"Sudoku runs\")\n\n    setSolving(false)\n\n    if (sudokuSolvedStatus) {\n      setGridData([...sudoku.grid])\n    } else {\n      Modal.error({\n        title: \"Sudoku\",\n        content: \"Sorry, this sudoku has no solution!\"\n      })\n    }\n  }\n\n  const generateSudoku = () => {\n    resetSudoku()\n    sudoku.generate()\n    setGridData([...sudoku.grid])\n  }\n\n  const resetSudoku = () => {\n    sudoku.reset()\n    setSolvedCells([])\n    setGridData([...sudoku.grid])\n    setShowTips(false)\n  }\n\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Layout.Content>\n          <div className=\"sudoku-container\">\n            <table className=\"sudoku-table\">\n              <tbody>\n                {gridData.map((row, y) => (\n                  <tr\n                    key={y}\n                    className={cx({\n                      \"block-boder\": (y + 1) % 3 === 0\n                    })}\n                  >\n                    {row.map((value, x) => (\n                      <td\n                        key={x}\n                        className={cx({\n                          \"block-boder\": (x + 1) % 3 === 0,\n                          solved: solvedCells.some(\n                            arr => arr.join() === [x, y].join()\n                          )\n                        })}\n                        onClick={() => setEditingCell([x, y].join())}\n                      >\n                        {showTips && !value && editingCell !== [x, y].join() ? (\n                          <div className=\"sudoku-tips\">\n                            {[1, 2, 3, 4, 5, 6, 7, 8, 9].map(num => (\n                              <span key={num}>\n                                {sudoku.allowedNumbers(x, y).includes(num) &&\n                                  num}\n                              </span>\n                            ))}\n                          </div>\n                        ) : (\n                          <input\n                            type=\"text\"\n                            value={value || \"\"}\n                            onChange={e => setValue(x, y, e.target.value)}\n                            readOnly={solving}\n                            ref={input =>\n                              (inputRefs.current[[x, y].join()] = input)\n                            }\n                          />\n                        )}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <div className=\"sudoku-actions\">\n              <Button.Group>\n                <Button\n                  type=\"primary\"\n                  size=\"large\"\n                  onClick={() => setSolving(true)}\n                  loading={solving}\n                >\n                  {solving ? \"Solving\" : \"Solve Now!\"}\n                </Button>\n                <Button\n                  size=\"large\"\n                  onClick={generateSudoku}\n                  disabled={solving}\n                >\n                  Regenerate Sudoku\n                </Button>\n                <Button size=\"large\" onClick={() => setShowTips(!showTips)}>\n                  {showTips ? \"Hide Tips\" : \"Show Tips\"}\n                </Button>\n                <Button size=\"large\" onClick={resetSudoku} disabled={solving}>\n                  Clear All\n                </Button>\n              </Button.Group>\n            </div>\n          </div>\n        </Layout.Content>\n      </Layout>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}